#
#	@(#)makerules (tool) 12-11-22
#		GNU make 用
#
#	クロス環境用開発ツール 標準ルール
#	Copyright (C) 2002-2012 by Personal Media Corporation
#
#	使用方法
#	メインの Makefile で下記の変数を必要に応じて設定してから、
#	このファイルを include する。
#
#	カレントディレクトリ名は次の形式とし、これにより一部のオプションが
#	指定できる。
#
#		machine.opt1.opt2...optn
#
#	先頭が機種名で、その後に . で区切ってオプションを指定する。
#	オプションの数および順序に制限は無い。
#	make のコマンドラインや Makefile 中でオプションが指定されている場合は
#	そちらが優先される。
#
#	BD	開発環境のベースディレクトリ (省略可能)
#		/usr/local/te	(省略時のデフォルト)
#
#	mode	コンパイルモード (省略可能)
#		(空)	リリース用コンパイル
#		debug	デバッグ用コンパイル
#	     ※	省略時はカレントディレクトリ名のオプションから設定される。
#		(例) xxx/yyy/pcat.debug  ->  debug
#
#	環境変数による指定
#	BD は環境変数によって指定することもできる。
#	BD を環境変数で指定した場合、下記のツール類のディレクトリも環境変数で
#	指定する必要がある。(必要なものだけで可)
#
#	GNUs		クロス環境用の GNU 関連ツール
#			(/usr/local の場合は指定不要)
#	GNU_BD		クロス開発用 GNU 関連ツールのベースディレクトリ
#
#	この makerules を使用するためには、下記のツールが必要である。
#
#	・GNU make	version 3.78.1
#	・perl		version 5.005_03
#
#	perl は、必ず /usr/local/bin になければならない。
#	make は、$(GNUs)/bin か /usr/local/bin になければならない。
#	バージョンは正確に同じものでなくても良いと思われる。
#
# ----------------------------------------------------------------------
#
#     Modified by T.Yokobayashi at 2016/11/21.
#
# ----------------------------------------------------------------------
#

.EXPORT_ALL_VARIABLES:

# カレントディレクトリ名によるオプション指定
options := $(strip $(subst ., ,$(notdir $(shell pwd))) $(options))

### 省略時のデフォルト設定 ###
ifndef BD
  # 開発環境のベースディレクトリ
  BD := /usr/local/te
endif

ifeq ($(origin mode), undefined)
  # コンパイルモード
  mode := $(filter debug, $(options))
endif

# ----------------------------------------------------------------------------

# コンパイルするマシンの機種・環境
#	CROSS_ARCH
#		SunOS-sparc	Solaris Ultra
#		SunOS-i386	Solaris x86
#		Linux-i686	Linux x86
#		Linux-x86_64	Linux x86 (64bit)
#		FreeBSD-i386	FreeBSD x86
#		Cygwin-i686	Cygwin x86
#		mingw32-x86_64	msys2(64bit)
#   Darwin-i386   macOS
#		unknown		不明
#	CCS
#		/usr/ccs が存在するとき ccs/
#		存在しないときは空
#
CROSS_ARCH := $(shell $(BD)/etc/platform)
CCS := $(shell test -d /usr/ccs && echo ccs/)

# 作成した開発ツールを実行する機種
OBJECT_ARCH := $(firstword $(options))

# 作成対象の機種上で make していなければならない
ifneq ($(CROSS_ARCH), $(OBJECT_ARCH))
  # ただし、次の機種の組み合わせでは、他機種向けの make が可能
  _tmp_  = Linux-x86_64.Linux-i686
  _tmp_ += FreeBSD-i386.Linux-i686
  ifeq ($(filter $(CROSS_ARCH).$(OBJECT_ARCH), $(_tmp_)), )
    $(error 開発ツールを実行する環境で make してください。)
  endif
endif

# コンパイラおよびツール類のベースディレクトリ
ifneq ($(origin BD), environment)
  # PMC 社内環境用の設定
  GNUs := /usr/local
  ifeq ($(CROSS_ARCH), SunOS-sparc)
    #GNUs := /u0/gnu
    # u30 (SunOS 5) 用
    GNUs := /opt/gnu
  endif
  ifeq ($(CROSS_ARCH), SunOS-i386)
    GNUs := /opt/sfw
  endif
  ifeq ($(CROSS_ARCH).$(OBJECT_ARCH), FreeBSD-i386.Linux-i686)
    GNUs := /usr/compat/linux/usr
  endif

  GNU_BD := $(BD)/tool/$(OBJECT_ARCH)

  TOOL_ORIGIN = "file" "command line"
else
  ifndef GNUs
    ifeq ($(CROSS_ARCH).$(OBJECT_ARCH), FreeBSD-i386.Linux-i686)
      GNUs := /usr/compat/linux/usr
    endif
  endif

  # BD が環境変数に設定されているときは、
  # ツール類のディレクトリも環境変数の設定を使用する。
  TOOL_ORIGIN = "environment" "file" "command line"
endif

# コマンドパス
PATH = .
ifneq ($(filter "$(origin GNUs)", $(TOOL_ORIGIN)), )
  PATH := $(PATH):$(GNUs)/bin
endif
ifneq ($(filter SunOS-%, $(CROSS_ARCH)), )
  PATH := $(PATH):/usr/local/bin:/usr/ucb:/usr/bin
  ifdef CCS
    PATH := $(PATH):/usr/$(CCS)bin
  endif
endif
ifneq ($(filter FreeBSD-%, $(CROSS_ARCH)), )
  PATH := $(PATH):/usr/local/bin:/bin:/usr/bin
endif
ifneq ($(filter Linux-%, $(CROSS_ARCH)), )
  PATH := $(PATH):/usr/local/bin:/bin:/usr/bin
endif
ifneq ($(filter Cygwin-%, $(CROSS_ARCH)), )
  PATH := $(PATH):/usr/local/bin:/bin:/usr/bin
endif
ifneq ($(filter Darwin-%, $(CROSS_ARCH)), )
  PATH := $(PATH):/usr/local/bin:/bin:/usr/bin
endif

### 依存ファイル生成関連 ###
# 依存ファイルの自動生成コマンド
MAKEDEPS = $(BD)/tool/build/etc/makedeps $(TARGET_ARCH) $(CPPFLAGS)

# DEPENDENCIES_OUTPUT が定義されているときは、
# gcc がコンパイル時に自動的に依存関係を書き出す。
ifdef DEPENDENCIES_OUTPUT
  # 依存ファイルから古い依存関係を削除する
  CUTDEPS = $(BD)/tool/build/etc/makedeps -r $(DEPENDENCIES_OUTPUT) $@
else
  CUTDEPS =
endif

### ホスト実行形式拡張子
HOSTEXT =

ifneq ($(filter Cygwin-%, $(CROSS_ARCH)), )
  HOSTEXT = .exe
endif
ifneq ($(filter mingw32-%, $(CROSS_ARCH)), )
  HOSTEXT = .exe
endif

### その他 ###
ifneq ($(filter mingw32-x86_64, $(CROSS_ARCH)), )
  ETCBIN := $(BD)/tool/mingw32-x86_64/etc
endif
ifneq ($(filter Darwin-i386, $(CROSS_ARCH)), )
  ETCBIN := $(BD)/tool/Darwin-i386/etc
endif

RM	= rm -f
CP	= cp
PERL	= perl

ifneq ($(filter SunOS-%, $(CROSS_ARCH)), )
  CPP	= /usr/$(CCS)lib/cpp
  CPP	= cpp
endif

### 開発ツール類のインストール ###
TOOL_INSTALLDIR = $(ETCBIN)
$(TOOL_INSTALLDIR)/%: %
	$(BD)/etc/backup_copy -t $< $(TOOL_INSTALLDIR)
	$(STRIP) $@

# ----------------------------------------------------------------------------

# GCC 動作環境
TARGET_ARCH =

# ヘッダファイルのディレクトリ
HEADER =

### C 関連 ###
ifeq ($(GNUs), /u0/gnu)
  CC := /u0/gnu/bin/sparc-sun-sunos4.1.4-gcc
else
  CC := gcc
endif
OUTPUT_OPTION = -o $@
ifeq ($(mode), debug)
  CFLAGS = -g
  CPPFLAGS = $(HEADER:%=-I%) -DDEBUG
else
  CFLAGS = -O2
  CPPFLAGS = $(HEADER:%=-I%)
endif

ifeq ($(CROSS_ARCH).$(OBJECT_ARCH), Linux-x86_64.Linux-i686)
  # 32bit 環境用を作成する
##  CFLAGS += -m32
endif

CFLAGS_WARNING      = -Wall -Wno-format
CFLAGS_WARNING_FULL = -pedantic -W -Wall -Wno-format

COMPILE.c = $(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) -c
LINK.c = $(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)

%.o: %.c; $(.o.c)
  define .o.c
	@$(CUTDEPS)
	$(COMPILE.c) $< $(OUTPUT_OPTION)
  endef

%.s: %.c; $(.s.c)
  define .s.c
	$(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) -S $<
  endef

%.i: %.c
	$(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) -E $< $(OUTPUT_OPTION)

### C++ 関連 ###
CXX := $(CC)
CXXFLAGS = $(CFLAGS)

COMPILE.cc = $(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) -c
LINK.cc = $(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)

%.o: %.cc; $(.o.cc)
  define .o.cc
	@$(CUTDEPS)
	$(COMPILE.cc) $< $(OUTPUT_OPTION)
  endef

%.s: %.cc; $(.s.cc)
  define .s.cc
	$(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) -S $<
  endef

%.i: %.cc
	$(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) -E $< $(OUTPUT_OPTION)

### リンカ関連 ###
LD = ld
ifeq ($(mode), debug)
  LDFLAGS = $(LIBDIR:%=-L%)
else
  LDFLAGS = $(LIBDIR:%=-L%)
endif

LIBDIR = $(COMMONLIB)
LOADLIBES =
LDOBJS =
LDLIBS =

ifeq ($(CROSS_ARCH).$(OBJECT_ARCH), Linux-x86_64.Linux-i686)
  # 32bit 環境用を作成する
##  LDFLAGS += -m32
endif

# 追加のリンクオプション指定用
ifneq ($(filter sl, $(options)), )
  LDFLAGS2 = -static
else
  LDFLAGS2 =
endif
START_ADR =

# 実行ファイルを作るリンク
LINK.o = $(CC) $(TARGET_ARCH) $(LDFLAGS) $(LDFLAGS2) $(START_ADR)

# 単にオブジェクトファイルをまとめるだけのリンク
LINK_R.o = $(CC) $(TARGET_ARCH) $(LDFLAGS) -r -nostdlib

%: %.o
	$(LINK.o) $(LDOBJS) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)

%.exe: %.o
	$(LINK.o) $(LDOBJS) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)

### ライブラリ関連 ###
AR = ar
ARFLAGS = rv
RANLIB = ranlib

(%): %
	$(AR) $(ARFLAGS) $@ $%

### ネームリスト作成 ###
ifeq ($(GNUs), /u0/gnu)
  NM = /u0/gnu/sparc-sun-sunos4.1.4/bin/nm
else
  NM = nm
endif
NMFLAGS = -n

%.map: %
	$(NM) $(NMFLAGS) $< > $@

%.map: %.exe
	$(NM) $(NMFLAGS) $< > $@

### その他 ###
ifeq ($(GNUs), /u0/gnu)
  STRIP = /u0/gnu/sparc-sun-sunos4.1.4/bin/strip
else
  STRIP = strip
endif

# ----------------------------------------------------------------------------

### ワイドキャラクターを TRON 文字コードに変換 ###
WCH2HEX = $(BD)/etc/wch2hex -t

%.c: %.C
	$(WCH2HEX) $< $(OUTPUT_OPTION)

%.cc: %.CC
	$(WCH2HEX) $< $(OUTPUT_OPTION)

# ----------------------------------------------------------------------------
#|History of "makerules"
#|======================
#|* 2016/11/21	makedepsのパスを、"$(BD)/etc"→"$(BD)/tool/build/etc"に変更
#|
